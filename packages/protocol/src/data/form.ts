/* eslint-disable */
// prettier-ignore
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type ButtonVariant = ("PRIMARY" | "SECONDARY" | "DANGER")
export type InputType = 'TEXT' | 'EMAIL' | 'PASSWORD' | 'NUMBER';
export type LayoutGridVariant = 'GRID2' | 'GRID4' | 'FREE';
export type LayoutJustifyContent = 'NORMAL' | 'END';
export type LayoutType = 'GRID' | 'FLEX';
export type OrientationType = 'horizontal' | 'vertical';
export type TextType = 'RAW' | 'MARKDOWN';
export type TextIconStyle = 'INLINE' | 'BLOCK';

export interface Form {
  $schema: string;
  id: string;
  config: FormConfig;
  components: Component[];
}
export interface FormConfig {
  renderer: string;
  theme: string;
}
export interface Component {
  id: string;
  type:
    | 'Button'
    | 'Checkbox'
    | 'Combobox'
    | 'Composite'
    | 'DataTable'
    | 'DatePicker'
    | 'Fieldset'
    | 'Input'
    | 'Layout'
    | 'Link'
    | 'Radio'
    | 'Select'
    | 'Text'
    | 'Textarea';
  config:
    | Button
    | Checkbox
    | Combobox
    | Composite
    | DataTable
    | DatePicker
    | Fieldset
    | Input
    | Layout
    | Link
    | Radio
    | Select
    | Text
    | Textarea;
}
export interface Button {
  action: string;
  icon: string;
  lgSpan: string;
  mdSpan: string;
  name: string;
  variant: ButtonVariant;
}
export interface Checkbox {
  label: string;
  lgSpan: string;
  mdSpan: string;
  selected: string;
}
export interface Combobox {
  completeMethod: string;
  itemLabel: string;
  itemValue: string;
  label: string;
  lgSpan: string;
  mdSpan: string;
  value: string;
  withDropdown: boolean;
}
export interface Composite {
  lgSpan: string;
  mdSpan: string;
  name: string;
  parameters: MapStringString;
  startMethod: string;
}
export interface MapStringString {
  [k: string]: string;
}
export interface DataTable {
  components: DataTableColumn[];
  lgSpan: string;
  maxRows: string;
  mdSpan: string;
  paginator: boolean;
  value: string;
}
export interface DataTableColumn {
  config: DataTableColumnConfig;
  id: string;
}
export interface DataTableColumnConfig {
  filterable: boolean;
  header: string;
  sortable: boolean;
  value: string;
}
export interface DatePicker {
  datePattern: string;
  label: string;
  lgSpan: string;
  mdSpan: string;
  showTime: boolean;
  timePattern: string;
  value: string;
}
export interface Fieldset {
  collapsed: boolean;
  collapsible: boolean;
  components: Component[];
  disabled: boolean;
  legend: string;
  lgSpan: string;
  mdSpan: string;
}
export interface Input {
  label: string;
  lgSpan: string;
  mdSpan: string;
  required: boolean;
  type: InputType;
  value: string;
}
export interface Layout {
  components: Component[];
  gridVariant: LayoutGridVariant;
  justifyContent: LayoutJustifyContent;
  lgSpan: string;
  mdSpan: string;
  type: LayoutType;
}
export interface Link {
  href: string;
  lgSpan: string;
  mdSpan: string;
  name: string;
}
export interface Radio {
  dynamicItemsLabel: string;
  dynamicItemsList: string;
  dynamicItemsValue: string;
  label: string;
  lgSpan: string;
  mdSpan: string;
  orientation: OrientationType;
  staticItems: SelectItem[];
  value: string;
}
export interface SelectItem {
  label: string;
  value: string;
}
export interface Select {
  dynamicItemsLabel: string;
  dynamicItemsList: string;
  dynamicItemsValue: string;
  label: string;
  lgSpan: string;
  mdSpan: string;
  staticItems: SelectItem[];
  value: string;
}
export interface Text {
  content: string;
  lgSpan: string;
  mdSpan: string;
  type: TextType;
  icon: string;
  iconStyle: string;
}
export interface Textarea {
  autoResize: boolean;
  label: string;
  lgSpan: string;
  mdSpan: string;
  rows: string;
  value: string;
}
