pipeline {
  agent any

  options {
    buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '5'))
  }

  triggers {
    cron '@midnight'
  }

  stages {
    stage('Screenshot') {
      steps {
        script {
          catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
            docker.image('mcr.microsoft.com/playwright:v1.43.0-jammy').inside {
              sh 'npm install'
              dir ('playwright') {
                sh 'npm run webtest:screenshot'
              }
            }
          }
          archiveArtifacts artifacts: '**/playwright/target/screenshots/**', allowEmptyArchive: true
          withChecks('IT WebTest') {
            junit testDataPublishers: [[$class: 'StabilityTestDataPublisher']], testResults: 'playwright/**/report.xml'
          }
        }
      }
    }
    stage('Deploy') {
      when {
        expression { isReleaseOrMasterBranch() && currentBuild.currentResult == 'SUCCESS' }
      }
      steps {
        script {
          docker.build('maven-build', '-f build/Dockerfile.maven .').inside {
            maven cmd: '-ntp -f playwright/tests/screenshots clean deploy -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn'
          }
          archiveArtifacts 'playwright/tests/screenshots/target/form-editor-screenshots-*.zip'
        }
      }
    }
  }
  post {
    always {
      discoverGitReferenceBuild()
    }
  }
}

def isReleaseOrMasterBranch() {
  return env.BRANCH_NAME == 'master' || env.BRANCH_NAME.startsWith('release/') 
}
