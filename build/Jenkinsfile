pipeline {
  agent any

  options {
    buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '5'))
  }

  triggers {
    cron '@midnight'
  }

  stages {
    stage('Build') {
      steps {
        script {
          catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
            docker.build('node', '-f build/Dockerfile .').inside {
              sh 'npm run update:axonivy:next'
              sh 'npm run ci'
            }
          }
          archiveArtifacts artifacts: '**/integrations/standalone/build/**', allowEmptyArchive: true
          currentBuild.description = "<a href=${BUILD_URL}artifact/integrations/standalone/build/index.html>Form Editor UI</a>"
          withChecks('ESLint') {
            recordIssues enabledForFailure: true, publishAllIssues: true, aggregatingResults: true, tools: [esLint(pattern: 'packages/**/eslint.xml,integrations/**/eslint.xml')], qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]]
          }
          withChecks('Test') {
            junit testDataPublishers: [[$class: 'StabilityTestDataPublisher']], testResults: 'packages/**/report.xml'
          }
        }
      }
    }
    stage('IT Tests') {
      steps {
        script {
          catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
            docker.image('mcr.microsoft.com/playwright:v1.40.1-jammy').inside {
              sh 'npm run webtest'
            }
          }
          archiveArtifacts artifacts: '**/playwright/test-results/**', allowEmptyArchive: true
          withChecks('IT WebTest') {
            junit testDataPublishers: [[$class: 'StabilityTestDataPublisher']], testResults: 'playwright/**/report.xml'
          }
        }
      }
    }
    stage('Protocol') {
      when {
        expression { isReleaseOrMasterBranch() }
      }
      steps {
        script {
          catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
            docker.build('node', '-f build/Dockerfile .').inside {
              def branchName = env.BRANCH_NAME.replace("/", "%252F")
              sh '''
                npm install
                npm run protocol clean

                artifacts="https://jenkins.ivyteam.io/job/core_json-schema/job/'''+branchName+'''/lastSuccessfulBuild/artifact"
                devSchema="${artifacts}/workspace/ch.ivyteam.ivy.dialog.form.schema/target/schema/form/*/form.json/*zip*/schema.zip"
                curl -o schema.zip ${devSchema}
                unzip -j schema.zip
                npm run protocol generate $PWD/form.json

                npm run build && npm run lint:ci
              '''
            }
          }
          withChecks('Integration Protocol ESLint') {
            recordIssues enabledForFailure: true, publishAllIssues: true, aggregatingResults: true, tools: [esLint(id: 'latest', pattern: 'packages/**/eslint.xml,integrations/**/eslint.xml')], qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]]
          }
        }
      }
    }
  }
  post {
    always {
      discoverGitReferenceBuild defaultBranch: 'master'
    }
  }
}

def isReleaseOrMasterBranch() {
  return env.BRANCH_NAME == 'master' || env.BRANCH_NAME.startsWith('release/') 
}
